version: "3.8"

services:
  redis:
    image: redis
    restart: on-failure
    expose:
      - "6379"

  db:
    image: postgres
    restart: on-failure
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "-c", "pg_isready -U $POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    tty: true
    expose:
      - "8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py create_superuser &&
             python manage.py collectstatic --no-input &&
             gunicorn --bind 0.0.0.0:8000 config.wsgi:application"
    environment:
      IN_DOCKER: "true"  # Указываем, что мы внутри docker контейнера и подгружаем нужные настройки в settings.py
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - ./static:/app/static
      - ./media:/app/media

  celery:
    build: .
    tty: true
    command: [ "sh", "-c", "celery -A config worker --loglevel=info" ]
    restart: on-failure
    environment:
      IN_DOCKER: "true"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - app
      - redis
      - db

  celery-beat:
    build: .
    tty: true
    command: [ "sh", "-c", "celery -A config beat --loglevel=info" ]
    restart: on-failure
    environment:
      IN_DOCKER: "true"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - app
      - redis
      - db

  nginx:
    image: nginx
    ports:
      - "8000:80"
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      - app

volumes:
  postgres_data:
